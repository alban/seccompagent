// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package seccompagent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeccompAgentFalcoClient is the client API for SeccompAgentFalco service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeccompAgentFalcoClient interface {
	PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error)
}

type seccompAgentFalcoClient struct {
	cc grpc.ClientConnInterface
}

func NewSeccompAgentFalcoClient(cc grpc.ClientConnInterface) SeccompAgentFalcoClient {
	return &seccompAgentFalcoClient{cc}
}

func (c *seccompAgentFalcoClient) PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error) {
	out := new(PublishEventResponse)
	err := c.cc.Invoke(ctx, "/seccompagentfalco.SeccompAgentFalco/PublishEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeccompAgentFalcoServer is the server API for SeccompAgentFalco service.
// All implementations must embed UnimplementedSeccompAgentFalcoServer
// for forward compatibility
type SeccompAgentFalcoServer interface {
	PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error)
	mustEmbedUnimplementedSeccompAgentFalcoServer()
}

// UnimplementedSeccompAgentFalcoServer must be embedded to have forward compatible implementations.
type UnimplementedSeccompAgentFalcoServer struct {
}

func (UnimplementedSeccompAgentFalcoServer) PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (UnimplementedSeccompAgentFalcoServer) mustEmbedUnimplementedSeccompAgentFalcoServer() {}

// UnsafeSeccompAgentFalcoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeccompAgentFalcoServer will
// result in compilation errors.
type UnsafeSeccompAgentFalcoServer interface {
	mustEmbedUnimplementedSeccompAgentFalcoServer()
}

func RegisterSeccompAgentFalcoServer(s grpc.ServiceRegistrar, srv SeccompAgentFalcoServer) {
	s.RegisterService(&SeccompAgentFalco_ServiceDesc, srv)
}

func _SeccompAgentFalco_PublishEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeccompAgentFalcoServer).PublishEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seccompagentfalco.SeccompAgentFalco/PublishEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeccompAgentFalcoServer).PublishEvent(ctx, req.(*PublishEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeccompAgentFalco_ServiceDesc is the grpc.ServiceDesc for SeccompAgentFalco service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeccompAgentFalco_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seccompagentfalco.SeccompAgentFalco",
	HandlerType: (*SeccompAgentFalcoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishEvent",
			Handler:    _SeccompAgentFalco_PublishEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seccomp-agent.proto",
}
